SREST Driver README
*******************

0- Introduction
========================

Srest driver is a "simple REST" (srest) driver that allows ONOS to communicates with a simple REST(HTTP) server on the devices. It implements only the minimun set of functions needed; some necessary for a correct usage being not implemented (i.e. deactivate) as well as checks. This is given for experimentation and documentation only, to be used as skeleton and completed. 

Conventions:
------------
Line starting with $ is a command
Term between angle brackets <..> is a variable
Files content are enclosed between (line_start)--

1- How to use it
================

a. Add srest module in ONOS module list
----------------------------------------

Add :
    "//drivers/srest:onos-drivers-srest-oar",
into
	ONOS_DRIVERS = [
section of file <ONOS_dir>/tools/build/bazel/modules.bzl


b. Run ONOS
-----------

Bazel run command will rebuild ONOS if needed

$ bazel run onos-local
Note that if behind a proxy and if you built it with proxy, you need to add same proxy options than used for building.
I.e. :
$ bazel run onos-local action_env=HTTP_PROXY=$http_proxy --action_env=HTTPS_PROXY=$http_proxy
(assuming than environment variable http_proxy contains proxy URL)


c. Activate functionality
-------------------------

$ <ONOS_dir>/tools/package/bin/onos "app activate org.onosproject.drivers.srest"
In order to discover the links between devices, you need to activate linkdiscovery application as well :
$ <ONOS_dir>/tools/package/bin/onos "app activate org.onosproject.linkdiscovery"

d. Install and launch the REST server on devices
------------------------------------------------

Assume that @IP of the device is <device_IP> and port used to communicate with ONOS is <device_port>
Install srestserver.py on your device 
Create files into directory where restserver will be launched (<srestserver_dir>) :
- DeviceDescription.json
- PortsDescription.json
- Links.json

IMPORTANT : See below for content of these files.
Launch srestserver.py :
$ cd <srestserver_dir>; python srestserver.py <device_port> <device_IP>

e. Create a JSON file with devices info and send it to ONOS
-----------------------------------------------------------

Example :
--
{
  "devices": {
    "rest:<device_IP>:<device_port>": {
      "rest": {
        "ip": "<device_IP>",
        "port": <device_port>,
        "protocol": "http"
      },
	"basic" : {
	    "driver" : "srest"
	}
	
    }
}
--
Store it to <cfg_file>

Assume that ONOS is reachable at addresse <ONOS@> (localhost is ok if ONOS runs on the same machine where you will issue onos-netcfg command)

Send it to ONOS with :
$ <ONOS_dir>/tools/package/runtime/bin/onos-netcfg <ONOS@>  <cfg_file>

You should see in the GUI or through ONOS commands the devices, ports and links as defined in <cfg_file>.

Et voilà !

2- JSON file content on devices
==============================

The simple REST server will send back content of JSON files on ONOS request.

a. DeviceDescription.json
-------------------------

It contains information about devices. If not provided, the field will be set to "Unknown"
Example :
--
{
    "manufacturer" : "Bell Labs",
    "hw_version" : "1.0",
    "sw_version" : "1.0",
    "serial_number" : "123456789"
}
--

b. PortsDescription.json
------------------------

Contain the list of ports of the device
Example :
--
[
    { "port_number" : "1" },
    { "port_number" : "2" }
]
--

c. Links.json
-------------

Contains the links between the devices. Only "src" and "dst" fields are mandatory, other fields are stored in annotations
Example:
--
[
    { "src" : "rest:192.168.80.2:8001/1",
      "dst" : "rest:192.168.80.1:8001/1",
      "other" : "will be saved in annotations"},
    { "src" : "rest:192.168.80.1:8001/1",
      "dst" : "rest:192.168.80.2:8001/1"}
]
--

3- Useful tips
==============

To clean the server: 
$ bazel clean 

To delete all compiled files and packages: 
$ bazel clean–expunge

To delete all  from onos: 
$ <ONOS_dir>/tools/package/bin/onos "onos:wipe-out please"


4- Architecture and how to develop a driver
===========================================
Assume that the name of the driver is <driver_name> (sometimes written <Driver_name> when an upper case is needed. For example, we will use "srest" (for simple REST) and "Srest"

a. Create hierarchy
-------------------

Create a directory <driver_name> into onos/drivers with its subdirectories with following command :
$ mkdir -p <ONOS_dir>/drivers/<driver_name>/src/main/resources <ONOS_dir>/drivers/<driver_name>/src/main/java/org/onosproject/drivers/<driver_name>

b. Prepare BUILD file
---------------------

Copy  BUILD file from <ONOS_dir>/drivers/srest  in <ONOS_dir>/drivers/<driver_name> directory. Customize it (see below). 
Be sure to update onos_app information (warning: do not left URL field empty, this will crash application building with an non understandable error message… any non empty string is ok). 
app_name is "org.onosproject.drivers.<driver_name>", as we are based on REST,we require rest dependencies (XX)

c. Describe behaviours
----------------------

Create a file <driver_name>-drivers.xml in resources dir.
This file describes the behaviours that the driver will support (zero behaviour is ok)

To get the devices registered in the devices list, you need to support org.onosproject.net.device.DeviceDescriptionDiscovery :
   
    <behaviour api="org.onosproject.net.device.DeviceDescriptionDiscovery"
                   impl="org.onosproject.drivers.<driver_name>.<java_class>"/>
		 
where <java_class> is the implementation of DeviceDescriptionDiscovery interface.

To have the links in the topology :
        <behaviour api="org.onosproject.net.behaviour.LinkDiscovery"
                   impl="org.onosproject.drivers.<driver_name>.<java_class>"/>

d. Prepare loader
-----------------
Copy SrestDriversLoader.java  into <ONOS_dir>/drivers/<driver_name>/src/main/java/org/onosproject/drivers/<driver_name>  dir with name <Driver_name>DriversLoader.java and update super() line with "/<driver_name>-drivers.xml"

e. Implement functionality
--------------------------
Create the java files that implements the behaviour declared in <driver_name>-drivers.xml with name as referenceed into xml file (i.e. impl= ‘….foo’, then create foo.java). You can borrow code from srest java files.


5- How to handle a configuration pushed with NetworkConfigurationService[1]
=================================================================================

a. Registering config class
---------------------------

In order to handle a configuration pushed into ONOS through NetworkConfigurationService, you need to register with the NetworkConfigRegistry, indicating :
- which subject (i.e. devices, ports, hosts, etc.) is concerned by the configuration,
- what is the key that identifies the configuration to be managed (i.e. basic, etc.),
- what is the class of the subject,
- and last what is the class of the config object that will deal with the config.

In srest, this is done in SrestDriversLoaders.java, in activate method, by registering a factory that will create a SrestDeviceConfig object when needed. This is registered with the config key "srest" (from SrestDeviceConfig.java) for subject "devices". That means that the JSON sub-tree identified by "srest" will be applied to identified device in the json  file by the SrestDeviceConfig object.

For example, we can push such configuration by the following command :
$ tools/package/runtime/bin/onos-netcfg <ONOS@> <config.json> 'devices/<device_id>/srest'
where config.json is :
--
{ "foo" : "bar" }
--

b. Registering a NetworkEvent listener
--------------------------------------

(Note that the following is maybe not the canonical way to do, but the only one I found at this stage. If other methods are available or recommended, please let me know).

In order to be notified each time that a configuration for "srest" key is provided to ONOS, we must register an event listener, as done in SrestDriversLoaders. The listener checks which event is fired. If this is CONFIG_ADDED or CONFIG_UPDATED it runs a thread with addOrUpdate method from config object (i.e. SrestDeviceConfig in our case).
In this method, we get access to the (REST) controller of the driver through the DefaultServiceDirectory.getService(<Class>) static method. It is then used to perform a POST HTTP request to the device, posting the JSON sub-tree corresponding to the "srest" key. 
The HTTP/REST server on the device side receives the JSON data. It is up to you to use it as needed. 

6- References
=============

[1] : https://wiki.onosproject.org/display/ONOS/The+Network+Configuration+Service